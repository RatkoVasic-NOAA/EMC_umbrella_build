Instructions for building and installing landsfcutil on Unix
************************************************************

$Id: README 71223 2016-03-03 18:08:22Z george.gayno@noaa.gov $
$URL: https://svnemc.ncep.noaa.gov/projects/nceplibs/landsfcutil/tags/version_2.1.0/README $
nceplibs support email: ncep.list.emc.nceplibs.support@noaa.gov


         Contents
         ========
  A. The easy (I hope) way...
  B. The more flexible way
    1. Configuration
    2. Building the library
    3. Testing the library
    4. Installing the library
       - NCO Install
       - NCO Cray Install
       - GNU Install
       - Uninstalling the library
    5. Cleaning up



A. The easy (I hope) way...
===========================

To build the single (_4) and mixed (_d) precision landsfcutil
libraries, you can use the "make_landsfcutil_lib.sh" script 
(use the "make_landsfcutil_lib_wcoss-cray.sh" script on the 
WCOSS-Cray systems) specifying the build configuration. Type:

  $ make_landsfcutil_lib.sh -h

to get the usage information for the script.

The available build configurations to use are:

  gfortran-debug.setup  ifort-debug.setup  pgf95-debug.setup  xlf2003-debug.setup
  gfortran.setup        ifort.setup        pgf95.setup        xlf2003.setup

  crayftn.setup
  crayftn-debug.setup

The build configurations define the compiler name and compiler flags.
Those named with "debug" contain flags useful for debugging.

So, on WCOSS Phase 1/2, to compile with intel, you would type:

  $ make_landsfcutil_lib.sh ifort.setup

On Theia you could do the same, or if you wanted to use the PGI compiler,

  $ make_landsfcutil_lib.sh pgf95.setup

On WCOSS-Cray/Surge/Luna if you wanted to use the Cray compiler,

  $ make_landsfcutil_lib_wcoss-cray.sh crayftn.setup

This script iterates over the single (_4) and mixed (_d) precision
build configurations setting the appropriate default real and integer precision
promotion compiler switches.

Some additional points:
- There is an "NCO-type" install that conforms to NCO's vertical structure.
  That is the default.
- There is also a "GNU-type" install that may be performed by adding
  "-g" at the command line:  $ make_landsfcutil_lib.sh -g ifort.setup
- The libraries are installed relative to the current directory. 
- See section B.4 below for information about the installation directory
  structure.

You can tailor the build process using this "make_landsfcutil_lib.sh" script by
modifying the relevant build configuration setup file in the "config-setup/"
subdirectory.

Or, if you are going to be testing library builds multiple times, you can
create your own configuration setup file.



B. The more flexible way
========================

1. Configuration
----------------

If you need more flexibility in the library build you can specify the necessary 
information directly to the configure script that generates the makefiles. For
example:

  $ ./configure --prefix=${PWD} \
                --enable-promote=4|d \
                FC="ifort" \
                FCFLAGS="-O2 -g -traceback -fixed"

The --prefix switch sets the installation directory and defaults to /usr/local so
make sure you set it to a directory in which you have write access.

The --enable-promote switch allows you to specify the type of precision build be it
single (4) or mixed (d) precision. To build the mixed precision library
you would use:

  --enable-promote=d

Not specifying this switch is equivalent to "--enable-promote=4".

The definition of the "FC" enviroment variable is not strictly necessary as it defaults
to "ifort" on linux systems if available (followed by "gfortran" and "pgf95" if not), and
to "xlf2003" on AIX systems.


2. Building the library
-----------------------

To start the library build for a particular configuration, simply type

  $ make



3. Testing the library
----------------------

We don't have any package-level tests yet. Sorry! They're coming...



4. Installing the library
-------------------------

Installation of the library *always* occurs into its own directory within the
directory specified by the --prefix switch. 


NCO Install
...........

To install the library conforming to the NCO organisation and naming conventions
on WCOSS Phase 2 type:

  $ make nco_install

For a library version (say, v2.0.1) and the default precision (4), this will create
a directory called "landsfcutil". That directory is organised according to the
current NCO structure on WCOSS Phase 2 in /nwprod2/lib, as shown below:

  landsfcutil/
     |
     `--v2.0.1/
           |
           |--liblandsfcutil_v2.0.1_4.a
           |
           `--include/
                 |
                 `--landsfcutil_v2.0.1_4/

The contents of the "landsfcutil" directory can then be moved into the official
/nwprod2/lib location as needed.

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usrx/local/nceplibs/landsfcutil/v2.0.1"
  FCFLAGS="-I${libroot}/include/landsfcutil_v2.0.1_4 ${FCFLAGS}"
  LDFLAGS="-L${libroot} ${LDFLAGS}"
  LIBS="-llandsfcutil_v2.0.1_4"


GNU Install
...........

To perform a GNU-type install, type:

  $ make install

For a library version (say, v2.0.1) and the default precision (4), this will create
a directory called "landsfcuutil_v2.0.1_4". That directory structure is shown below:

  landsfcutil_v2.0.1_4/
    |
    |--include/
    |
    `--lib/
         |
         `--liblandsfcutil.a

Note: The only versioned item in this type of install is the name of the
      installation directory itself.

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
library in this structure in your own application, the usual environment variables
would be modified something like:

  libroot="/usrx/local/nceplibs"
  FCFLAGS="-I${libroot}/landsfcutil_v2.0.1_4/include ${FCFLAGS}"
  LDFLAGS="-L${libroot}/landsfcutil_v2.0.1_4/lib ${LDFLAGS}"
  LIBS="-llandsfcutil"


NCO Install as on WCOSS-Cray/Surge/Luna
.......................................

To install the library conforming to the NCO vertical structure and naming
conventions on WCOSS-Cray/Surge/Luna, type:

  $ make nco_cray_install

If you create the single precsion (_4) library for v2.0.1 and invoke
"make nco_cray_install", the directory tree will look like:

  landsfcutil/
    |
    `--v2.0.1/${COMPILER}/
                   |
                   |--liblandsfcutil_v2.0.1_4.a
                   |
                   `--include/
                         |
                         `--landsfcutil_v2.0.1_4/

Here $COMPILER is the name of the Fortran compiler used.  For example, if the
Intel compiler is used, then $COMPILER will be "ifort".  This may be changed
at the configure step by "--enable-wcoss_cray_dir=${your_name}" as:

  $ ./configure --prefix=${PWD} \
                --enable-promote=4|d \
                --enable-wcoss_cray_dir=intel \
                FC="ifort" \
                ... other arguments ...

which would result in the following directory tree:

  landsfcutil/
    |
    `--v2.0.1/intel/
                |
                |--liblandsfcutil_v2.0.1_4.a
                |
                `--include/
                      |
                      `--landsfcutil_v2.0.1_4/

Let's assume the above install was moved into "/usrx/local/nceplibs", to use the
single precision library in this structure in your own application, the usual
environment variables would be modified something like:

  libroot="/usrx/local/nceplibs/landsfcutil/v2.0.1/intel"
  FCFLAGS="-I${libroot}/include/landsfcutil_v2.0.1_4 ${FCFLAGS}"
  LDFLAGS="-L${libroot} ${LDFLAGS}"
  LIBS="-llandsfcutil_v2.0.1_4"


Uninstalling the library after a GNU-type install
.................................................

To uninstall the library (assuming you haven't moved the installation directory
contents somewhere else) you can type:

  $ make uninstall
  
This will delete the created installation directory. So, for a library version
(say, v2.0.1) and the default precision (4), if your configure script invocation
was something like

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "uninstall" target will delete the "${PWD}/landsfcutil_v2.0.1_4" directory.


Uninstalling the library after an NCO-install
.............................................

To uninstall the library you can type:

  $ make nco_uninstall
  
This will delete the created installation directory. So, for a library version
(say, v2.0.1) and if your configure script invocation was something like

  $ ./configure --prefix=${PWD} ...other command line arguments...

then the "nco_uninstall" target will delete the "${PWD}/landsfcutil/v2.0.1" directory.


Uninstalling the library after an NCO WCOSS-Cray/Surge/Luna install
...................................................................

To uninstall the library you can type:

  $ make nco_cray_uninstall

which will delete the created installation directory.

Ex: For a library version of v2.0.1, if your configure script invocation was
something like...

  $ ./configure --prefix=${PWD} \
    --enable-wcoss_cray_dir=intel  ...other command line arguments...

then the "nco_cray_uninstall" target will delete the "${PWD}/landsfcutil/v2.0.1/intel" directory.


5. Cleaning up
--------------

Two targets are provided for cleaning up after the build. To remove all the 
build products type

  $ make clean

To also remove all the configuration products (i.e. the makefiles) type

  $ make distclean
